// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pack.proto

#ifndef PROTOBUF_INCLUDED_pack_2eproto
#define PROTOBUF_INCLUDED_pack_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pack_2eproto 

namespace protobuf_pack_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pack_2eproto
namespace PKMSG {
class Msg_Body;
class Msg_BodyDefaultTypeInternal;
extern Msg_BodyDefaultTypeInternal _Msg_Body_default_instance_;
class PK_Head;
class PK_HeadDefaultTypeInternal;
extern PK_HeadDefaultTypeInternal _PK_Head_default_instance_;
}  // namespace PKMSG
namespace google {
namespace protobuf {
template<> ::PKMSG::Msg_Body* Arena::CreateMaybeMessage<::PKMSG::Msg_Body>(Arena*);
template<> ::PKMSG::PK_Head* Arena::CreateMaybeMessage<::PKMSG::PK_Head>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PKMSG {

enum Msg_Body_SystemType {
  Msg_Body_SystemType_IOS = 0,
  Msg_Body_SystemType_Android = 1,
  Msg_Body_SystemType_Symbian = 2,
  Msg_Body_SystemType_Windows = 3,
  Msg_Body_SystemType_Linux = 4,
  Msg_Body_SystemType_Other = 5,
  Msg_Body_SystemType_Msg_Body_SystemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Msg_Body_SystemType_Msg_Body_SystemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Msg_Body_SystemType_IsValid(int value);
const Msg_Body_SystemType Msg_Body_SystemType_SystemType_MIN = Msg_Body_SystemType_IOS;
const Msg_Body_SystemType Msg_Body_SystemType_SystemType_MAX = Msg_Body_SystemType_Other;
const int Msg_Body_SystemType_SystemType_ARRAYSIZE = Msg_Body_SystemType_SystemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Msg_Body_SystemType_descriptor();
inline const ::std::string& Msg_Body_SystemType_Name(Msg_Body_SystemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Msg_Body_SystemType_descriptor(), value);
}
inline bool Msg_Body_SystemType_Parse(
    const ::std::string& name, Msg_Body_SystemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Msg_Body_SystemType>(
    Msg_Body_SystemType_descriptor(), name, value);
}
// ===================================================================

class PK_Head : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PKMSG.PK_Head) */ {
 public:
  PK_Head();
  virtual ~PK_Head();

  PK_Head(const PK_Head& from);

  inline PK_Head& operator=(const PK_Head& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PK_Head(PK_Head&& from) noexcept
    : PK_Head() {
    *this = ::std::move(from);
  }

  inline PK_Head& operator=(PK_Head&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PK_Head& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_Head* internal_default_instance() {
    return reinterpret_cast<const PK_Head*>(
               &_PK_Head_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PK_Head* other);
  friend void swap(PK_Head& a, PK_Head& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PK_Head* New() const final {
    return CreateMaybeMessage<PK_Head>(NULL);
  }

  PK_Head* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PK_Head>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PK_Head& from);
  void MergeFrom(const PK_Head& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_Head* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 PkType = 1;
  void clear_pktype();
  static const int kPkTypeFieldNumber = 1;
  ::google::protobuf::uint32 pktype() const;
  void set_pktype(::google::protobuf::uint32 value);

  // uint32 PkLength = 2;
  void clear_pklength();
  static const int kPkLengthFieldNumber = 2;
  ::google::protobuf::uint32 pklength() const;
  void set_pklength(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PKMSG.PK_Head)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pktype_;
  ::google::protobuf::uint32 pklength_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Msg_Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PKMSG.Msg_Body) */ {
 public:
  Msg_Body();
  virtual ~Msg_Body();

  Msg_Body(const Msg_Body& from);

  inline Msg_Body& operator=(const Msg_Body& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Msg_Body(Msg_Body&& from) noexcept
    : Msg_Body() {
    *this = ::std::move(from);
  }

  inline Msg_Body& operator=(Msg_Body&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Body& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Msg_Body* internal_default_instance() {
    return reinterpret_cast<const Msg_Body*>(
               &_Msg_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Msg_Body* other);
  friend void swap(Msg_Body& a, Msg_Body& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Msg_Body* New() const final {
    return CreateMaybeMessage<Msg_Body>(NULL);
  }

  Msg_Body* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Msg_Body>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Msg_Body& from);
  void MergeFrom(const Msg_Body& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Msg_Body_SystemType SystemType;
  static const SystemType IOS =
    Msg_Body_SystemType_IOS;
  static const SystemType Android =
    Msg_Body_SystemType_Android;
  static const SystemType Symbian =
    Msg_Body_SystemType_Symbian;
  static const SystemType Windows =
    Msg_Body_SystemType_Windows;
  static const SystemType Linux =
    Msg_Body_SystemType_Linux;
  static const SystemType Other =
    Msg_Body_SystemType_Other;
  static inline bool SystemType_IsValid(int value) {
    return Msg_Body_SystemType_IsValid(value);
  }
  static const SystemType SystemType_MIN =
    Msg_Body_SystemType_SystemType_MIN;
  static const SystemType SystemType_MAX =
    Msg_Body_SystemType_SystemType_MAX;
  static const int SystemType_ARRAYSIZE =
    Msg_Body_SystemType_SystemType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemType_descriptor() {
    return Msg_Body_SystemType_descriptor();
  }
  static inline const ::std::string& SystemType_Name(SystemType value) {
    return Msg_Body_SystemType_Name(value);
  }
  static inline bool SystemType_Parse(const ::std::string& name,
      SystemType* value) {
    return Msg_Body_SystemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string Msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .PKMSG.PK_Head PkHead = 1;
  bool has_pkhead() const;
  void clear_pkhead();
  static const int kPkHeadFieldNumber = 1;
  private:
  const ::PKMSG::PK_Head& _internal_pkhead() const;
  public:
  const ::PKMSG::PK_Head& pkhead() const;
  ::PKMSG::PK_Head* release_pkhead();
  ::PKMSG::PK_Head* mutable_pkhead();
  void set_allocated_pkhead(::PKMSG::PK_Head* pkhead);

  // uint32 MsgLength = 3;
  void clear_msglength();
  static const int kMsgLengthFieldNumber = 3;
  ::google::protobuf::uint32 msglength() const;
  void set_msglength(::google::protobuf::uint32 value);

  // uint32 IndexID = 5;
  void clear_indexid();
  static const int kIndexIDFieldNumber = 5;
  ::google::protobuf::uint32 indexid() const;
  void set_indexid(::google::protobuf::uint32 value);

  // uint32 Sequence = 6;
  void clear_sequence();
  static const int kSequenceFieldNumber = 6;
  ::google::protobuf::uint32 sequence() const;
  void set_sequence(::google::protobuf::uint32 value);

  // uint32 BodyNumber = 7;
  void clear_bodynumber();
  static const int kBodyNumberFieldNumber = 7;
  ::google::protobuf::uint32 bodynumber() const;
  void set_bodynumber(::google::protobuf::uint32 value);

  // .PKMSG.Msg_Body.SystemType Type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::PKMSG::Msg_Body_SystemType type() const;
  void set_type(::PKMSG::Msg_Body_SystemType value);

  // @@protoc_insertion_point(class_scope:PKMSG.Msg_Body)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::PKMSG::PK_Head* pkhead_;
  ::google::protobuf::uint32 msglength_;
  ::google::protobuf::uint32 indexid_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 bodynumber_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pack_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PK_Head

// uint32 PkType = 1;
inline void PK_Head::clear_pktype() {
  pktype_ = 0u;
}
inline ::google::protobuf::uint32 PK_Head::pktype() const {
  // @@protoc_insertion_point(field_get:PKMSG.PK_Head.PkType)
  return pktype_;
}
inline void PK_Head::set_pktype(::google::protobuf::uint32 value) {
  
  pktype_ = value;
  // @@protoc_insertion_point(field_set:PKMSG.PK_Head.PkType)
}

// uint32 PkLength = 2;
inline void PK_Head::clear_pklength() {
  pklength_ = 0u;
}
inline ::google::protobuf::uint32 PK_Head::pklength() const {
  // @@protoc_insertion_point(field_get:PKMSG.PK_Head.PkLength)
  return pklength_;
}
inline void PK_Head::set_pklength(::google::protobuf::uint32 value) {
  
  pklength_ = value;
  // @@protoc_insertion_point(field_set:PKMSG.PK_Head.PkLength)
}

// -------------------------------------------------------------------

// Msg_Body

// .PKMSG.PK_Head PkHead = 1;
inline bool Msg_Body::has_pkhead() const {
  return this != internal_default_instance() && pkhead_ != NULL;
}
inline void Msg_Body::clear_pkhead() {
  if (GetArenaNoVirtual() == NULL && pkhead_ != NULL) {
    delete pkhead_;
  }
  pkhead_ = NULL;
}
inline const ::PKMSG::PK_Head& Msg_Body::_internal_pkhead() const {
  return *pkhead_;
}
inline const ::PKMSG::PK_Head& Msg_Body::pkhead() const {
  const ::PKMSG::PK_Head* p = pkhead_;
  // @@protoc_insertion_point(field_get:PKMSG.Msg_Body.PkHead)
  return p != NULL ? *p : *reinterpret_cast<const ::PKMSG::PK_Head*>(
      &::PKMSG::_PK_Head_default_instance_);
}
inline ::PKMSG::PK_Head* Msg_Body::release_pkhead() {
  // @@protoc_insertion_point(field_release:PKMSG.Msg_Body.PkHead)
  
  ::PKMSG::PK_Head* temp = pkhead_;
  pkhead_ = NULL;
  return temp;
}
inline ::PKMSG::PK_Head* Msg_Body::mutable_pkhead() {
  
  if (pkhead_ == NULL) {
    auto* p = CreateMaybeMessage<::PKMSG::PK_Head>(GetArenaNoVirtual());
    pkhead_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PKMSG.Msg_Body.PkHead)
  return pkhead_;
}
inline void Msg_Body::set_allocated_pkhead(::PKMSG::PK_Head* pkhead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pkhead_;
  }
  if (pkhead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pkhead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pkhead, submessage_arena);
    }
    
  } else {
    
  }
  pkhead_ = pkhead;
  // @@protoc_insertion_point(field_set_allocated:PKMSG.Msg_Body.PkHead)
}

// string Msg = 2;
inline void Msg_Body::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Msg_Body::msg() const {
  // @@protoc_insertion_point(field_get:PKMSG.Msg_Body.Msg)
  return msg_.GetNoArena();
}
inline void Msg_Body::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PKMSG.Msg_Body.Msg)
}
#if LANG_CXX11
inline void Msg_Body::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PKMSG.Msg_Body.Msg)
}
#endif
inline void Msg_Body::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PKMSG.Msg_Body.Msg)
}
inline void Msg_Body::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PKMSG.Msg_Body.Msg)
}
inline ::std::string* Msg_Body::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:PKMSG.Msg_Body.Msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Msg_Body::release_msg() {
  // @@protoc_insertion_point(field_release:PKMSG.Msg_Body.Msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Msg_Body::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:PKMSG.Msg_Body.Msg)
}

// uint32 MsgLength = 3;
inline void Msg_Body::clear_msglength() {
  msglength_ = 0u;
}
inline ::google::protobuf::uint32 Msg_Body::msglength() const {
  // @@protoc_insertion_point(field_get:PKMSG.Msg_Body.MsgLength)
  return msglength_;
}
inline void Msg_Body::set_msglength(::google::protobuf::uint32 value) {
  
  msglength_ = value;
  // @@protoc_insertion_point(field_set:PKMSG.Msg_Body.MsgLength)
}

// uint32 IndexID = 5;
inline void Msg_Body::clear_indexid() {
  indexid_ = 0u;
}
inline ::google::protobuf::uint32 Msg_Body::indexid() const {
  // @@protoc_insertion_point(field_get:PKMSG.Msg_Body.IndexID)
  return indexid_;
}
inline void Msg_Body::set_indexid(::google::protobuf::uint32 value) {
  
  indexid_ = value;
  // @@protoc_insertion_point(field_set:PKMSG.Msg_Body.IndexID)
}

// uint32 Sequence = 6;
inline void Msg_Body::clear_sequence() {
  sequence_ = 0u;
}
inline ::google::protobuf::uint32 Msg_Body::sequence() const {
  // @@protoc_insertion_point(field_get:PKMSG.Msg_Body.Sequence)
  return sequence_;
}
inline void Msg_Body::set_sequence(::google::protobuf::uint32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:PKMSG.Msg_Body.Sequence)
}

// uint32 BodyNumber = 7;
inline void Msg_Body::clear_bodynumber() {
  bodynumber_ = 0u;
}
inline ::google::protobuf::uint32 Msg_Body::bodynumber() const {
  // @@protoc_insertion_point(field_get:PKMSG.Msg_Body.BodyNumber)
  return bodynumber_;
}
inline void Msg_Body::set_bodynumber(::google::protobuf::uint32 value) {
  
  bodynumber_ = value;
  // @@protoc_insertion_point(field_set:PKMSG.Msg_Body.BodyNumber)
}

// .PKMSG.Msg_Body.SystemType Type = 8;
inline void Msg_Body::clear_type() {
  type_ = 0;
}
inline ::PKMSG::Msg_Body_SystemType Msg_Body::type() const {
  // @@protoc_insertion_point(field_get:PKMSG.Msg_Body.Type)
  return static_cast< ::PKMSG::Msg_Body_SystemType >(type_);
}
inline void Msg_Body::set_type(::PKMSG::Msg_Body_SystemType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PKMSG.Msg_Body.Type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PKMSG

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PKMSG::Msg_Body_SystemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PKMSG::Msg_Body_SystemType>() {
  return ::PKMSG::Msg_Body_SystemType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pack_2eproto
